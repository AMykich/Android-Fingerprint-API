// Code generated by dagger-compiler.  Do not edit.
package com.example.android.fingerprintdialog;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<FingerprintUiHelper.FingerprintUiHelperBuilder>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code FingerprintUiHelper.FingerprintUiHelperBuilder} and its
 * dependencies.
 *
 * Being a {@code Provider<FingerprintUiHelper.FingerprintUiHelperBuilder>} and handling creation and
 * preparation of object instances.
 */
public final class FingerprintUiHelper$FingerprintUiHelperBuilder$$InjectAdapter extends Binding<FingerprintUiHelper.FingerprintUiHelperBuilder>
    implements Provider<FingerprintUiHelper.FingerprintUiHelperBuilder> {
  private Binding<android.support.v4.hardware.fingerprint.FingerprintManagerCompat> fingerprintManager;

  public FingerprintUiHelper$FingerprintUiHelperBuilder$$InjectAdapter() {
    super("com.example.android.fingerprintdialog.FingerprintUiHelper$FingerprintUiHelperBuilder", "members/com.example.android.fingerprintdialog.FingerprintUiHelper$FingerprintUiHelperBuilder", NOT_SINGLETON, FingerprintUiHelper.FingerprintUiHelperBuilder.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    fingerprintManager = (Binding<android.support.v4.hardware.fingerprint.FingerprintManagerCompat>) linker.requestBinding("android.support.v4.hardware.fingerprint.FingerprintManagerCompat", FingerprintUiHelper.FingerprintUiHelperBuilder.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(fingerprintManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<FingerprintUiHelper.FingerprintUiHelperBuilder>}.
   */
  @Override
  public FingerprintUiHelper.FingerprintUiHelperBuilder get() {
    FingerprintUiHelper.FingerprintUiHelperBuilder result = new FingerprintUiHelper.FingerprintUiHelperBuilder(fingerprintManager.get());
    return result;
  }

}
